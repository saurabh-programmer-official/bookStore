package com.fabellus.placeorder;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import com.fabellus.rabbitmq.BookInventoryInfo;
import com.fabellus.rabbitmq.OrderInfo1;
import com.fabellus.rabbitmq.OrderItemInfo;

@Service
@Transactional
public class PlaceOrderServiceImpl implements PlaceOrderService{

	@Autowired
	OrderDAO orderDAO;
	@Autowired
	OrderItemDAO orderItemDAO;
	@Autowired
	BookInventoryDAO bookInventoryDAO;
	
	
	public List<Order> getOrdersByUserId(String userId) {
	// TODO Auto-generated method stub
	List<Order> orderList = orderDAO.findOrdersByUserId(userId);
		return orderList;

	}
	
	
	public Order placeOrder(OrderInfo orderInfo) {
		// TODO Auto-generated method stub
		//Save the order
		//Order info is coming from front end and order is transient object for now
		Order myorder = orderInfo.getOrder(); // Non Persistent Object without any primary key

//		Order order = new Order(myorder.getOrderDate(),myorder.getUserId(),myorder.getTotalQty(),myorder.getTotalCost(),myorder.getStatus());
//		Order ordersaved = orderDAO.save(order);//Primary key gets generated
		myorder = orderDAO.save(myorder); // Persistent Object with generated Primary Key
		int orderId = myorder.getOrderId(); 
		//Insert Order Item
		
		List<OrderItem> itemList =orderInfo.getItemList();
		for(OrderItem orderItem: itemList) {
		orderItem.setOrderId(orderId);
		orderItemDAO.save(orderItem);
		}

		// Update the local inventory
		for(OrderItem orderItem:itemList) {
			/*
			 * From DeSearialised OrderItemInfo object, get bookId 
			 * and for respective bookId get inventory count of that book
			 * */
			int bookId = orderItem.getBookId();
			BookInventory bookInventory = bookInventoryDAO.findById(bookId).get();
			bookInventory.setBookAvailable(bookInventory.getBookAvailable()-orderItem.getQty());
			bookInventory = bookInventoryDAO.save(bookInventory);

			//Update Remote Inventory
			BookInventoryInfo bookInventoryInfo = new BookInventoryInfo();
			bookInventoryInfo.setBookId(bookInventory.getBookId());
			bookInventoryInfo.setBookAvailable(bookInventory.getBookAvailable());
			System.out.println("passing from Placeorder exchange: "+ bookInventoryInfo);
	
		}
		return null;

	}
}
